#BlueJ class context
comment0.target=Point
comment0.text=\ \ \n\ \ Classe\ Point\:\ classe\ "tipus\ de\ dades"\ que\ defineix\ un\ punt\ al\ pla\ \n\ \ cartesia,\ determinat\ per\ les\ seues\ coordenades\ x\ i\ y.\ \n\ \ \n\ \ @author\ IIP\ -\ Parcial\ 1\n\ \ @version\ Curs\ 2018/19\n
comment1.params=px\ py
comment1.target=Point(double,\ double)
comment1.text=\ Crea\ un\ Point\ amb\ abscissa\ px\ i\ ordenada\ py.\ \n\ \ @param\ px\ double,\ l'absciasa.\n\ \ @param\ py\ double,\ l'ordenada.\n
comment10.params=o
comment10.target=boolean\ equals(java.lang.Object)
comment10.text=\n\ Comprova\ si\ el\ Point\ this\ es\ igual\ a\ un\ altre\ Point\ donat.\n\ @param\ o\ Object,\ objecte\ a\ comparar\ amb\ el\ Point\ this.\n\ @return\ boolean,\ true\ si\ o\ es\ un\ Point\ i\ les\ coordenades\n\ x\ i\ y\ del\ Point\ this\ coincideixen\ amb\ les\ del\ Point\ donat\ i\ \n\ false\ en\ cas\ contrari.\n
comment11.params=
comment11.target=java.lang.String\ toString()
comment11.text=\ Torna\ un\ String\ que\ representa\ el\ Point\ this\ en\ el\ \ \n\ \ formato\ tipic\ matematic,\ i.e.,\ (abscissa,ordenada)\ \n\ \ @return\ String,\ el\ resultat.\n
comment12.params=m\ p
comment12.target=Point\ yIntercept(double,\ Point)
comment12.text=\ Donats\ un\ double\ m\ i\ un\ Point\ p,\ que\ junt\ amb\ el\ Point\ this\ \ \n\ \ forma\ part\ d'una\ recta\ de\ pendent\ m,\ torna\ this,\ p\ o\ \n\ \ el\ punt\ (0.0,0.0)\ si\ el\ terme\ independent\ de\ la\ recta\ \n\ \ \u00E9s\ negatiu,\ positiu\ o\ zero,\ respectivament.\n\ \ Precondici\u00F3\:\ les\ abscisses\ de\ this\ i\ p\ s\u00F3n\ distintes\ i,\ \n\ \ per\ tant,\ la\ pendent\ m\ no\ \u00E9s\ infinita.\ \n\ \ @param\ m\ double,\ la\ pendent.\n\ \ @param\ p\ Point,\ l'altre\ Point.\n\ \ @return\ Point,\ el\ resultat.\n
comment2.params=
comment2.target=Point()
comment2.text=Crea\ un\ Point\ amb\ abscissa\ 0.0\ i\ ordenada\ 0.0.
comment3.params=
comment3.target=double\ getX()
comment3.text=\ Torna\ l'abscissa\ del\ Point\ this.\ \n\ \ @return\ double,\ l'abscissa.\ \ \ \ \ \ \n
comment4.params=
comment4.target=double\ getY()
comment4.text=\ Torna\ l'ordenada\ del\ Point\ this.\n\ \ @return\ double,\ l'ordenada.\n
comment5.params=px
comment5.target=void\ setX(double)
comment5.text=\ Actualitza\ l'abscissa\ del\ Point\ this\ a\ px.\n\ \ @param\ px\ double,\ la\ nova\ abscissa.\n
comment6.params=py
comment6.target=void\ setY(double)
comment6.text=\ Actualitza\ l'ordenada\ del\ Point\ this\ a\ py.\ \n\ \ @param\ py\ double,\ la\ nova\ ordenada.\n
comment7.params=p
comment7.target=double\ distance(Point)
comment7.text=\ Torna\ la\ distancia\ entre\ el\ Point\ this\ i\ un\ altre\ Point\ donat.\n\ \ @param\ p\ Point,\ l'altre\ Point.\n\ \ @return\ double,\ la\ distancia.\n
comment8.params=
comment8.target=double\ distance()
comment8.text=\ Torna\ la\ distancia\ entre\ el\ Point\ this\ i\ l'origen\n\ \ de\ coordenades.\ \ \ \ \ \n\ \ @return\ double,\ la\ distancia.\n
comment9.params=px\ py
comment9.target=void\ move(double,\ double)
comment9.text=\ Actualitza\ l'abscissa\ del\ Point\ this\ a\ px\ i\ l'ordenada\ a\ py.\n\ \ @param\ px\ double,\ la\ nova\ abscissa.\n\ \ @param\ py\ double,\ la\ nova\ ordenada.\n
numComments=13
