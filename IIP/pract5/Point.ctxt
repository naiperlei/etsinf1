#BlueJ class context
comment0.target=Point
comment0.text=\ \ \n\ \ Classe\ Point\:\ classe\ "tipus\ de\ dades"\ que\ defineix\ un\ punt\ al\ pla\ \n\ \ cartesia,\ determinat\ per\ les\ seues\ coordenades\ x\ i\ y.\ \n\ \ \n\ \ @author\ IIP\ -\ Practica\ 5\n\ \ @version\ Curs\ 2018/19\n
comment1.params=
comment1.target=Point()
comment1.text=Crea\ un\ Point\ amb\ abscissa\ 0.0\ i\ ordenada\ 0.0.
comment10.params=
comment10.target=java.lang.String\ toString()
comment10.text=\ Torna\ un\ String\ que\ representa\ el\ Point\ this\ en\ el\ \ \n\ \ formato\ tipic\ matematic,\ i.e.,\ (abscissa,ordenada)\ \n\ \ @return\ String,\ el\ resultat.\n
comment11.params=u\ v
comment11.target=int\ cross(Point,\ Point)
comment11.text=\ Donat\ el\ raig\ que\ s'inicia\ en\ this\ i\ avan\u00E7a\ paral.lel\ a\ l'eix\ X\n\ \ en\ sentit\ +,\ comprova\ si\ aquest\ raig\ creua\ el\ segment\ de\ \n\ \ recta\ uv,\ es\ a\ dir,\ passa\ per\ un\ unic\ punt\ del\ segment.\n\ \ @param\ u\ Point,\ punt\ extrem\ del\ segment\ de\ recta\ uv.\n\ \ @param\ v\ Point,\ punt\ extrem\ del\ segment\ de\ recta\ uv.\n\ \ @return\ int,\ enter\ entre\ DONT_CROSS\ (-1),\ LOW_CROSS\ (0),\ \n\ \ CROSS\ (1),\ HIGH_CROSS\ (2),\ segons\ els\ casos\:\n\ \ -\ Si\ el\ raig\ no\ creua\ el\ segment,\ torna\ DONT_CROSS.\n\ \ -\ Si\ el\ raig\ el\ creua\ per\ l'extrem\ mes\ baix,\ torna\ LOW_CROSS.\n\ \ -\ Si\ el\ raig\ el\ creua\ per\ un\ punt\ entre\ u\ i\ v,\ torna\ CROSS.\n\ \ -\ Si\ el\ raig\ el\ creua\ per\ l'extrem\ mes\ alt,\ torna\ HIGH_CROSS.\n
comment2.params=px\ py
comment2.target=Point(double,\ double)
comment2.text=\ Crea\ un\ Point\ amb\ abscissa\ px\ i\ ordenada\ py.\ \n\ \ @param\ px\ double,\ l'absciasa.\n\ \ @param\ py\ double,\ l'ordenada.\n
comment3.params=
comment3.target=double\ getX()
comment3.text=\ Torna\ l'abscissa\ del\ Point\ this.\ \n\ \ @return\ double,\ l'abscissa.\ \ \ \ \ \ \n
comment4.params=
comment4.target=double\ getY()
comment4.text=\ Torna\ l'ordenada\ del\ Point\ this.\n\ \ @return\ double,\ l'ordenada.\n
comment5.params=px
comment5.target=void\ setX(double)
comment5.text=\ Actualitza\ l'abscissa\ del\ Point\ this\ a\ px.\n\ \ @param\ px\ double,\ la\ nova\ abscissa.\n
comment6.params=py
comment6.target=void\ setY(double)
comment6.text=\ Actualitza\ l'ordenada\ del\ Point\ this\ a\ py.\ \n\ \ @param\ py\ double,\ la\ nova\ ordenada.\n
comment7.params=p
comment7.target=double\ distance(Point)
comment7.text=\ Torna\ la\ distancia\ entre\ el\ Point\ this\ i\ un\ altre\ Point\ donat.\n\ \ @param\ p\ Point,\ l'altre\ Point.\n\ \ @return\ double,\ la\ distancia.\n
comment8.params=px\ py
comment8.target=void\ move(double,\ double)
comment8.text=\ Actualitza\ l'abscissa\ del\ Point\ this\ a\ px\ i\ l'ordenada\ a\ py.\n\ \ @param\ px\ double,\ la\ nova\ abscissa.\n\ \ @param\ py\ double,\ la\ nova\ ordenada.\n
comment9.params=o
comment9.target=boolean\ equals(java.lang.Object)
comment9.text=\n\ Comprova\ si\ el\ Point\ this\ es\ igual\ a\ un\ altre\ Point\ donat.\n\ @param\ o\ Object,\ objecte\ a\ comparar\ amb\ el\ Point\ this.\n\ @return\ boolean,\ true\ si\ o\ es\ un\ Point\ i\ les\ coordenades\n\ x\ i\ y\ del\ Point\ this\ coincideixen\ amb\ les\ del\ Point\ donat\ i\ \n\ false\ en\ cas\ contrari.\n
numComments=12
